# Define the Home Assistant devices that we will be using to retreive remote
# temperature readings.  Currently a remote temp sensor is required mostly due
# to the fact that the iSee sensor in the Mitsubishi unit is incredibly inaccurate.
# The original Kumo cloud implementation deployed with bluetooth temp/humidity
# sensors which dramatically improved things.
#
# However, for flexibility the ID for this device and the ID used by the climate
# device are defined by substitutions allowing reconfiguration if necessary.
#
sensor:
  # Room Temperature Sensor
  - platform: homeassistant
    name: "Remote Temperature Sensor"
    id: rts_primary_sensor
    entity_id: ${rts_primary_sensor}
    internal: true
    disabled_by_default: true
    device_class: temperature
    state_class: measurement
    unit_of_measurement: "Â°C"
    filters:
      # We currently use Celcius for internal temp management
      - lambda: return (x - 32) * (5.0/9.0);
      - clamp: # Limits values to range accepted by Mitsubishi units
          min_value: 1
          max_value: 40
          ignore_out_of_range: true
      - throttle: 5s
    on_value:
      then:
        #- script.execute: reevaluate_remote_temp
        - lambda: 'id(rts_effective_temp).publish_state(x);'

script:
  # Helper script called when the climate mode changes.
  - id: climate_mode_changed
    then:
      - lambda: |-
          ESP_LOGI("main", "Climate mode change: %d", id(${hp_id}).mode);

